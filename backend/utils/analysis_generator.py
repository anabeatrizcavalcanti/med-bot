import os
import json
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("A vari√°vel de ambiente OPENAI_API_KEY n√£o foi encontrada.")
client = AsyncOpenAI(api_key=api_key)

# Vers√£o 1: Prompt que USA o gloss√°rio (RAG)
RAG_PROMPT_TEMPLATE = """
Voc√™ √© Med-Bot, um assistente m√©dico que analisa um resultado de exame alterado, **usando a 'Interpreta√ß√£o Base' como fonte principal de verdade**.

**Tarefa:** Crie uma an√°lise personalizada para o paciente, em JSON.

- `titulo`: Crie um t√≠tulo curto. Ex: "Hem√°cias Abaixo do Normal".
- `analise`: Usando seu conhecimento, explique o que o valor `{value}` pode indicar, considerando que o paciente tem `{idade}` anos, √© do sexo `{sexo}`, e o resultado est√° `{status}`.  **Use markdown para negrito (`**palavra**`)** e listas. Comece com um emoji informativo (ex: ü©∫, ü©∏, üî¨). **N√ÉO use sauda√ß√µes.**
- `recomendacao`: Sugira qual especialista procurar (ex: Hematologista) e o que fazer. Comece com um emoji de a√ß√£o (ex: üßë‚Äç‚öïÔ∏è, üóìÔ∏è). Use negrito.
- `alerta`: Uma frase curta enfatizando que isso n√£o √© um diagn√≥stico. Comece com um emoji de alerta (ex: ‚ö†Ô∏è).

**Dados do Exame:**
- **Termo:** "{term}"
- **Resultado do Paciente:** "{value}"
- **Status:** "{status}"
- **Idade:** "{idade}"
- **Sexo:** "{sexo}"
- **Interpreta√ß√£o Base (Fonte de Verdade):** "{interpretation}"

Gere o JSON.
"""

async def generate_ai_analysis_rag(term: str, value: str, status: str, interpretation: str, idade: int, sexo: str) -> dict:
    """Gera uma an√°lise com IA usando o gloss√°rio (RAG)."""
    prompt = RAG_PROMPT_TEMPLATE.format(
        term=term, value=value, status=status, interpretation=interpretation, idade=idade, sexo=sexo
    )
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ cria an√°lises em JSON baseadas estritamente no contexto fornecido."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
            response_format={"type": "json_object"},
        )
        return json.loads(resp.choices[0].message.content)
    except Exception as e:
        return {"titulo": "Erro na An√°lise RAG", "analise": str(e), "recomendacao": "", "alerta": ""}

# Vers√£o 2: Prompt que N√ÉO usa o gloss√°rio (Conhecimento Geral da IA)
NO_RAG_PROMPT_TEMPLATE = """
Voc√™ √© Med-Bot, um assistente m√©dico que analisa um resultado de exame alterado, **usando seu conhecimento m√©dico geral**.

**Tarefa:** Crie uma an√°lise personalizada para o paciente, em JSON.

- `titulo`: Crie um t√≠tulo curto. Ex: "Hem√°cias Abaixo do Normal".
- `analise`: Usando seu conhecimento, explique o que o valor `{value}` pode indicar, considerando que o paciente tem `{idade}` anos, √© do sexo `{sexo}`, e o resultado est√° `{status}`.  **Use markdown para negrito (`**palavra**`)** e listas. Comece com um emoji informativo (ex: ü©∫, ü©∏, üî¨). **N√ÉO use sauda√ß√µes.**
- `recomendacao`: Sugira qual especialista procurar (ex: Hematologista) e o que fazer. Comece com um emoji de a√ß√£o (ex: üßë‚Äç‚öïÔ∏è, üóìÔ∏è). Use negrito.
- `alerta`: Uma frase curta enfatizando que isso n√£o √© um diagn√≥stico. Comece com um emoji de alerta (ex: ‚ö†Ô∏è).

**Dados do Exame:**
- **Termo:** "{term}"
- **Resultado do Paciente:** "{value}"
- **Status:** "{status}"
- **Idade:** "{idade}"
- **Sexo:** "{sexo}"

Gere o JSON.
"""

async def generate_ai_analysis_no_rag(term: str, value: str, status: str, idade: int, sexo: str) -> dict:
    """Gera uma an√°lise com IA sem usar o gloss√°rio."""
    prompt = NO_RAG_PROMPT_TEMPLATE.format(
        term=term, value=value, status=status, idade=idade, sexo=sexo
    )
    try:
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ cria an√°lises em JSON usando seu conhecimento m√©dico geral."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.5,
            response_format={"type": "json_object"},
        )
        return json.loads(resp.choices[0].message.content)
    except Exception as e:
        return {"titulo": "Erro na An√°lise Sem RAG", "analise": str(e), "recomendacao": "", "alerta": ""}

